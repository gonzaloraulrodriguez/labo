setwd("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart")
#cargo las librerias que necesito
require("data.table")
#cargo las librerias que necesito
require("data.table")
require("rpart")
#Aqui se debe poner la carpeta de SU computadora local
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\src\\rpart")  #Establezco el Working Directory
wd
#Aqui se debe poner la carpeta de SU computadora local
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\src\\rpart")  #Establezco el Working Directory
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasets/paquete_premium_202011.csv")
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202011.csv")
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split
minbucket=  1,     #tamaño minimo de una hoja
maxdepth=   4 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
require("data.table")
require("rpart")
require("rpart.plot")
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
dapply  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202101.csv")
prediccion  <- predict( modelo, dapply , type = "prob")
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
dir.create( "./labo/exp/" )
dir.create( "./labo/exp/KA2001" )
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/" )
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/KA2001")
fwrite( entrega,
file= "./labo/exp/KA2001/K101_001.csv",
sep= "," )
fwrite( entrega,
file= "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp//KA2001/K101_001.csv",
sep= "," )
View(entrega)
View(entrega)
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  40,     #minima cantidad de registros para que se haga el split (80)
minbucket=  4,     #tamaño minimo de una hoja (1)
maxdepth=   23 )    #profundidad maxima del arbol (4)
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
dapply  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202101.csv")
prediccion  <- predict( modelo, dapply , type = "prob")
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
fwrite( entrega,
file= "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp//KA2001/K101_001.csv",
sep= "," )
o  <-
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  150,     #minima cantidad de registros para que se haga el split (80)
minbucket=  1,     #tamaño minimo de una hoja (1)
maxdepth=   5 )    #profundidad maxima del arbol (4)
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
fwrite( entrega,
file= "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp//KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  90,     #minima cantidad de registros para que se haga el split (80)
minbucket=  10,     #tamaño minimo de una hoja (1)
maxdepth=   4 )    #profundidad maxima del arbol (4)
dapply  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202101.csv")
prediccion  <- predict( modelo, dapply , type = "prob")
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/")
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/KA2001")
fwrite( entrega,
file= "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp//KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  1000,     #minima cantidad de registros para que se haga el split (80)90
minbucket=  100,     #tamaño minimo de una hoja (1)10
maxdepth=   30 )    #profundidad maxima del arbol (4)4
dapply  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/")
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/KA2001")
fwrite( entrega,
file= "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp//KA2001/K101_001.csv",
sep= "," )
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  90,     #minima cantidad de registros para que se haga el split (80)M90
minbucket=  10,     #tamaño minimo de una hoja (1)M10
maxdepth=   5 )    #profundidad maxima del arbol (4)M4
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/")
dir.create( "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp/KA2001")
fwrite( entrega,
file= "C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\exp//KA2001/K101_001.csv",
sep= "," )
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\src\\rpart")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202011.csv")
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 236087 )
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed = 236087 )  #Cambiar po
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\src\\rpart")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202011.csv")
#particiono estratificadamente el dataset
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed = 236087 )
param_basicos  <- list( "cp"=         0,  #complejidad minima
"minsplit"=  10,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  2,  #minima cantidad de registros en una hoja
"maxdepth"=  10 ) #profundidad máxima del arbol
modelo  <- rpart("clase_ternaria ~ .",     #quiero predecir clase_ternaria a partir del resto
data= dataset[ fold==1],  #fold==1  es training,  el 70% de los datos
xval= 0,
control=  param_basicos )  #aqui van los parametros
prediccion  <- predict( modelo,   #el modelo que genere recien
dataset[ fold==2],  #fold==2  es testing, el 30% de los datos
type= "prob") #type= "prob"  es que devuelva la probabilidad
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) ]
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
ganancia_test  <- dataset[ fold==2 & prob_baja2 >  1/60, sum(ganancia) ]
ganancia_test_normalizada  <-  ganancia_test / 0.3
cat( ganancia_test_normalizada )
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\src\\rpart")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202011.csv")
#particiono estratificadamente el dataset
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed = 236107 )  #Cambiar por la primer semilla de cada uno !
param_basicos  <- list( "cp"=         0,  #complejidad minima
"minsplit"=  10,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  2,  #minima cantidad de registros en una hoja
"maxdepth"=  10 ) #profundidad máxima del arbol
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",     #quiero predecir clase_ternaria a partir del resto
data= dataset[ fold==1],  #fold==1  es training,  el 70% de los datos
xval= 0,
control=  param_basicos )  #aqui van los parametros
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,   #el modelo que genere recien
dataset[ fold==2],  #fold==2  es testing, el 30% de los datos
type= "prob") #type= "prob"  es que devuelva la probabilidad
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego una columna que es la de las ganancias
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) ]
#para testing agrego la probabilidad
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
#calculo la ganancia en testing  qu es fold==2
ganancia_test  <- dataset[ fold==2 & prob_baja2 >  1/60, sum(ganancia) ]
#escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada  <-  ganancia_test / 0.3
cat( ganancia_test_normalizada )
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\src\\rpart")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202011.csv")
#particiono estratificadamente el dataset
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed = 236111 )  #Cambiar por la primer semilla de cada uno !
param_basicos  <- list( "cp"=         0,  #complejidad minima
"minsplit"=  10,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  2,  #minima cantidad de registros en una hoja
"maxdepth"=  10 ) #profundidad máxima del arbol
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",     #quiero predecir clase_ternaria a partir del resto
data= dataset[ fold==1],  #fold==1  es training,  el 70% de los datos
xval= 0,
control=  param_basicos )  #aqui van los parametros
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,   #el modelo que genere recien
dataset[ fold==2],  #fold==2  es testing, el 30% de los datos
type= "prob") #type= "prob"  es que devuelva la probabilidad
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego una columna que es la de las ganancias
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) ]
#para testing agrego la probabilidad
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
#calculo la ganancia en testing  qu es fold==2
ganancia_test  <- dataset[ fold==2 & prob_baja2 >  1/60, sum(ganancia) ]
#escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada  <-  ganancia_test / 0.3
cat( ganancia_test_normalizada )
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\src\\rpart")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202011.csv")
#particiono estratificadamente el dataset
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed = 236129 )  #Cambiar por la primer semilla de cada uno !
param_basicos  <- list( "cp"=         0,  #complejidad minima
"minsplit"=  10,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  2,  #minima cantidad de registros en una hoja
"maxdepth"=  10 ) #profundidad máxima del arbol
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",     #quiero predecir clase_ternaria a partir del resto
data= dataset[ fold==1],  #fold==1  es training,  el 70% de los datos
xval= 0,
control=  param_basicos )  #aqui van los parametros
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,   #el modelo que genere recien
dataset[ fold==2],  #fold==2  es testing, el 30% de los datos
type= "prob") #type= "prob"  es que devuelva la probabilidad
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego una columna que es la de las ganancias
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) ]
#para testing agrego la probabilidad
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
#calculo la ganancia en testing  qu es fold==2
ganancia_test  <- dataset[ fold==2 & prob_baja2 >  1/60, sum(ganancia) ]
#escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada  <-  ganancia_test / 0.3
cat( ganancia_test_normalizada )
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\Gonzalo\\Desktop\\MMD\\Git Clone\\labo\\src\\rpart")  #Establezco el Working Directory
#cargo los datos
dataset  <- fread("C:\\Users\\Gonzalo\\Desktop\\MMD\\Datasets/paquete_premium_202011.csv")
#particiono estratificadamente el dataset
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed = 236143 )  #Cambiar por la primer semilla de cada uno !
param_basicos  <- list( "cp"=         0,  #complejidad minima
"minsplit"=  10,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  2,  #minima cantidad de registros en una hoja
"maxdepth"=  10 ) #profundidad máxima del arbol
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",     #quiero predecir clase_ternaria a partir del resto
data= dataset[ fold==1],  #fold==1  es training,  el 70% de los datos
xval= 0,
control=  param_basicos )  #aqui van los parametros
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,   #el modelo que genere recien
dataset[ fold==2],  #fold==2  es testing, el 30% de los datos
type= "prob") #type= "prob"  es que devuelva la probabilidad
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego una columna que es la de las ganancias
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) ]
#para testing agrego la probabilidad
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
#calculo la ganancia en testing  qu es fold==2
ganancia_test  <- dataset[ fold==2 & prob_baja2 >  1/60, sum(ganancia) ]
#escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada  <-  ganancia_test / 0.3
cat( ganancia_test_normalizada )
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
prueba = c(1,2)
prueba(1)
prueba[1]
semillas = c(236087, 236107, 236111, 236129, 236143)
for (i in semillas)
{
cat(i)
}
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/211_traintest_estratificado.r")
clear
clear()
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/222_traintest_montecarlo.r")
mean(unlist(ganancias))
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/222_traintest_montecarlo.r")
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/222_traintest_montecarlo.r", echo=TRUE)
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/222_traintest_montecarlo.r", echo=TRUE)
source("C:/Users/Gonzalo/Desktop/MMD/Git Clone/labo/src/rpart/231_mejormodelo.r", echo=TRUE)
